import asyncio
from logging import exception
from io import BytesIO
from re import compile
# –∏–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Aiogram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram import Router, F, types, Bot
from aiogram.exceptions import TelegramRetryAfter
from aiogram.filters import Command, CommandObject, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.methods.close import Close
from aiogram.types import Message, FSInputFile, BufferedInputFile
# –∏–º–ø–æ—Ä—Ç –º–µ—Ç–æ–¥–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from Generators import LanguageModel, ImageModel


# –°–æ–∑–¥–∞–Ω–∏–µ –†–æ—É—Ç–µ—Ä–∞
# –Ω—É–∂–µ–Ω –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router = Router()
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
IsOn = False


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
class Generate(StatesGroup):
    text = State()

# —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ –≤–∫–ª—é—á–µ–Ω –±–æ—Ç –∏–ª–∏ –Ω–µ—Ç(–±—É–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
class MyFilter(BaseFilter):
    async def __call__(self, message: types.Message) -> bool:
        return IsOn


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Generate.text)
async def generate_error(message: Message):
    await message.answer("""–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, 
    –ø–æ–¥–æ–∂–¥–∏—Ç–µ""")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(Command('start'), ~MyFilter())
async def cmd_start(message: Message, state: FSMContext, bot: Bot):
    print('–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')
    global IsOn
    IsOn = True
    await message.answer("""–ü—Ä–∏–≤–µ—Ç!

    –ú–µ–Ω—è –∑–æ–≤—É—Ç Estafano. –Ø –±–æ—Ç –∞—Å—Å–∏—Å–µ–Ω—Ç, –Ω–∞–¥–µ–ª–µ–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ –ø–æ–∏—Å–∫–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.

    –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞–ª, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É.

    –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–æ–π:

    /start ‚Äî –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞;
    /help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö;
    /GenerateImage {–∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è} ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É;
    /stop ‚Äî –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞;

    –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä""")
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
@router.message(Command('stop'), MyFilter())
async def stop_bot(message, bot: Bot):
    print('–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞')
    await message.reply("–ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")
    global IsOn
    IsOn = False
    while True:
        try:
            await bot(Close())
            break
        except TelegramRetryAfter as e:
            exception(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
            print(f"–°–µ—Ä–≤–µ—Ä–∞ Telegram'–∞: {e.message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.retry_after + 1)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /help
@router.message(Command(compile(r'(H|h)elp(@(E|e)fano(B|b)ot)?')))
async def help(message: Message, state: FSMContext):
    print('–í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /help')
    await state.set_state(Generate.text)
    response = '''–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
    /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞;
    
    /help ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö;
    
    /GenerateImage {–∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è} ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É;
    
    /stop ‚Äî –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞;
    
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    await message.answer(response)
    await state.clear()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.message(Command(compile(r'(G|g)enerate(I|i)mage(@(E|e)fano(B|b)ot)?')), MyFilter())
async def GenerateImageAnswer(message: Message, command: CommandObject):
    args = command.args
    print('args:   ', args)
    try:
        image = await ImageModel(args)
        image_data = BytesIO()
        image.image.save(image_data, format="PNG")
        image_data.seek(0)
        image_bytes = image_data.getvalue()
        await message.reply_photo(photo=BufferedInputFile(image_bytes, filename="photo.png"), caption="–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        exception(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
@router.message(F.text, MyFilter())
async def GenerateTextAnswer(message: Message, state: FSMContext) -> None:
    msg = message.text.lower()
    print(f'–ó–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º:   {msg}')
    await state.set_state(msg)
    try:
        task = asyncio.create_task(LanguageModel(message.text))
        response = await task
        await message.answer(response, parse_mode="html")
    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞')
        exception(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        print(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
    finally:
        await state.clear()
